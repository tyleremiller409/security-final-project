//===- jump_operations.dl -----------------------------------*- datalog -*-===//
//
//  Copyright (C) 2020 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
The set of jump operations in aarch64
*/

// Basic jump operations
jump_operation("B").
jump_operation("B.AL").  // always (not really conditional)
jump_operation("BR").

/**
Conditional branches
*/
.decl conditional_branch(Operation:symbol,CC:condition_code)

conditional_branch(Operation,CC):-
    (
        Base = "B.";
        Base = "BC."
    ),
    condition_code_map(Suffix,CC),
    Operation = cat(Base,Suffix).

jump_operation(Operation),
conditional_operation(Operation,CC):-
    conditional_branch(Operation,CC).

/**
ARM64 conditional test and jump operations
*/
.decl test_jump_operation(Operation:symbol,JumpTargetIndex:operand_index,CC:condition_code)
test_jump_operation("CBZ",1,"E").
test_jump_operation("CBNZ",1,"NE").
test_jump_operation("TBZ",2,"E").
test_jump_operation("TBNZ",2,"NE").

jump_operation(Operation),
conditional_operation(Operation,CC):-
    test_jump_operation(Operation,_,CC).

jump_operation_op_index(Operation,1):-
    jump_operation(Operation),
    !test_jump_operation(Operation,_,_).

jump_operation_op_index(Operation,Index):-
    jump_operation(Operation),
    test_jump_operation(Operation,Index,_).

call_operation_op_index(Operation,1):-
    call_operation(Operation).
