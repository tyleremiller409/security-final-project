//===- arch_x86_64.dl ---------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
#include "arch_x86.dl"

.comp X86_64 : X86 {

#include "registers_x86_64.dl"

pointer_size(8).

inferred_main_in_reg(EA,"RDI"):-
    inferred_main_dispatch(EA).

}

symbolic_operand_attribute(EA,Index,"PltRef"):-
    symbolic_operand(EA,Index,Dest,_),
    plt_block(Dest,_).

symbolic_operand_attribute(EA,Index,"PltRef"):-
    instruction_immediate_offset(EA,Index,Offset,_),
    instruction_has_relocation(EA,EA+Offset),
    relocation(EA+Offset,"PLT32",_,_,_,_,_).

symbolic_operand_attribute(EA,Index,"GotRelPC"):-
    symbolic_operand(EA,Index,Dest,_),
    !moved_label(EA,Index,_,_),
    got_reference(Dest,_),
    !relocation(Dest,"DTPMOD64",_,_,_,_,_).

symbolic_operand_attribute(EA,Index,"GotRelPC"):-
    instruction_displacement_offset(EA,Index,Offset,_),
    symbolic_expr_from_relocation(EA+Offset,_,_,_,_),
    (
        relocation(EA+Offset,"GOTPCRELX",_,_,_,_,_);
        relocation(EA+Offset,"REX_GOTPCRELX",_,_,_,_,_)
    ).

symbolic_operand_attribute(EA,Index,"TpOff"):-
    (
        instruction_displacement_offset(EA,Index,Offset,_),
        symbolic_expr_from_relocation(EA+Offset,_,_,_,_),
        relocation(EA+Offset,"TPOFF32",_,_,_,_,_)
        ;
        symbolic_operand(EA,Index,Dest,_),
        tls_segment(Start,End,_),
        Dest >= Start, Dest < End
    ).

symbolic_operand_attribute(EA,Index,"TpOff"):-
    symbolic_operand(EA,Index,Dest,_),
    got_reference(Dest,_),
    relocation(Dest,"TPOFF64",_,_,_,_,_).

// Find special-case TLSD code sequence of the form:
// .byte 0x66
// lea rdi, X@tlsgd[rip]
// .value 0x6666
// rex64
// call __tls_get_addr@PLT
//
// Explanation:
// GCC uses explict directives to inline 0x66 bytes (which are actually `data16'
// instruction prefixes) as padding that have no "negative impact on the code".
// Likewise, the accompanying `rex64' prefix on the call instruction inserts a 0x48
// byte to extend the code sequence to the requisite 16-byte length, and again has
// "no impact the code".
// Reference:
// https://docs.oracle.com/cd/E19120-01/open.solaris/819-0690/chapter8-60/index.html
.decl tlsgd_code_sequence(EA:address)
tlsgd_code_sequence(EA):-
    relocation(Got_entry,"DTPMOD64","",_,_,_,_),
    pc_relative_operand(EA,_,Got_entry),
    data_byte(EA,0x66),                           // .byte 0x66
    instruction(EA+1,Size,_,"LEA",_,_,_,_,_,_),   // lea X@tlsgd[rip]
    data_byte(EA+Size+1,0x66),                    // .value 0x6666
    data_byte(EA+Size+2,0x66),
    data_byte(EA+Size+3,0x48).                    // rex64

symbolic_operand_attribute(EA,Index,"TlsGd"):-
    symbolic_operand(EA,Index,Dest,_),
    relocation(Dest,"DTPMOD64",_,_,_,_,_),
    tlsgd_code_sequence(EA).

symbolic_operand_attribute(EA,Index,"TlsLd"):-
    symbolic_operand(EA,Index,Dest,_),
    relocation(Dest,"DTPMOD64",_,_,_,_,_),
    !tlsgd_code_sequence(EA).
