//===- jump_operations.dl -----------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
The set of jump operations in x86
*/

/**
Conditional jumps that rely on EFLAGS
*/
.decl jump_condition_code(Operation:symbol,CC:condition_code)

jump_condition_code("JO","O").
jump_condition_code("JNO","NO").
jump_condition_code("JB","B").
jump_condition_code("JNB","AE").
jump_condition_code("JNA","BE").
jump_condition_code("JA","A").
jump_condition_code("JL","L").
jump_condition_code("JGE","GE").
jump_condition_code("JLE","LE").
jump_condition_code("JG","G").
jump_condition_code("JAE","AE").
jump_condition_code("JE","E").
jump_condition_code("JNE","NE").
jump_condition_code("JBE","BE").
jump_condition_code("JNBE","A").
jump_condition_code("JP","P").
jump_condition_code("JNP","PE").
jump_condition_code("JS","L").
jump_condition_code("JNS","GE").
jump_condition_code("JCXZ","E").
jump_condition_code("JECXZ","E").
jump_condition_code("JRCXZ","E").

jump_operation(Operation),
conditional_operation(Operation,CC):-
    jump_condition_code(Operation,CC).

jump_operation("JMP").

jump_operation_op_index(Operation,1):-
    jump_operation(Operation);
    loop_operation(Operation,_).

call_operation_op_index(Operation,1):-
    call_operation(Operation).
