//===- bitmasks.dl -----------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This module detects specific kinds of bitmasks and bitmask operations.

*/

// a low pass mask is a bitmap mask of the form 0^*1^+
.decl low_pass_mask(Mask:number)

low_pass_mask((2^N)-1):-
    arch.pointer_size(Pt_size),
    N = range(1,8*as(Pt_size,number)).

.decl low_pass_filter(EA:address)

low_pass_filter(EA):-
    code(EA),
    op_immediate_and_reg(EA,"AND",_,_,Imm),
    low_pass_mask(Imm).

.decl is_xor_reset(EA:address)

is_xor_reset(EA):-
    instruction(EA,_,_,"XOR",Op1,Op2,0,0,_,_),
    op_regdirect_contains_reg(Op1,Reg),
    op_regdirect_contains_reg(Op2,Reg).
