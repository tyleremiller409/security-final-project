//===- code_inference.dl ------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This module computes the valid instructions organized in blocks of
code.  It infers the facts `code_in_block`, `block`, and `code`. In
addition it computes `block_still_overlap` for debugging purposes.

The disassembly is done in two traversals:

  - A "must" backward traversal that propagates invalid instructions
  - A "may" forward traversal that tries to generate a
    superset of all possible code blocks (with the predicates `possible_target`
    and `code_in_block_candidate`). This traversal has a recursive component
    and a linear-sweep component.

Finally, we detect candidate blocks of code that overlap with each other (and
therefore are in conflict) and give them points according to several
heuristics. Then for each two conflicting blocks we keep the one with
more points. For deciding code vs data, we consider code block
candidates and data block candidates.
*/


// The postprocess refines the blocks by merging contiguous blocks
// that are always executed together
#include "code_inference_postprocess.dl"

// cfg generates a control flow graph
#include "cfg.dl"

/**
The instruction at address 'EA' belong to the block 'Block'.
The block address is the address of the first instruction in the block.
These are final addresses where the code is located.
They are organized in blocks of sequential code
and the block identifier is the address of the first instruction in the block.
*/
.decl code_in_block(EA:address,Block:address)
.output code_in_block

/**
There is a code block starting at 'Block'.
*/
.decl block(Block:address)
/**
The instruction at address 'EA' is code.
*/
.decl code(EA:address) inline

/**
The last instruction of 'Block' is at address 'EA'
*/
.decl block_last_instruction(Block:address,EA:address)

/**
The block defined by address 'Block' extends from 'BegAddr' to 'EndAddr'.
In most cases 'BegAddr' and 'Block' coincide, but there are exceptions such as
ARM 32 Thumb code blocks.
*/
.decl block_boundaries(block:address,BegAddr:address,EndAddr:address)

/**
Predicate to capture overlapping instructions. Certain overlapping instructions
are permitted and do not generate block conflicts. Those overlapping
instructions are captured by this predicate.
*/
.decl overlapping_instruction(EA:address, EA2: address)
.output overlapping_instruction

/**
There is a segment of data in a code section that spans from 'Begin' to 'End'.
*/
.decl data_in_code(Begin:address,End:address)

/**
A block candidate can be a "code" or "data" block candidate.
*/
.type block_type <: symbol
/**
This predicate if there are still overlapping blocks after the
code inference. In that case the analysis has failed to resolve all conflicts.
*/
.decl block_still_overlap(Block1:address,Type1:block_type,Block2:address,Type2:block_type)
.output block_still_overlap


/////////////////////////////////////////////////////////////
// Basic facts to define fallthrough

.decl may_fallthrough(o:address,d:address)

// Branch with a delay-slot can always fallthrough
may_fallthrough(From,To):-
    next(From,To),
    arch.delay_slot(From,To).

// Delay-slot can fallthrough if the corresponding branch is not unconditional
// or a return.
may_fallthrough(From,To):-
    next(From,To),
    arch.delay_slot(Prev,From),
    !unconditional_return(Prev),
    !unconditional_jump(Prev).

// Common case
may_fallthrough(From,To):-
    next(From,To),
    !arch.delay_slot(_,From),
    !unconditional_return(From),
    !unconditional_jump(From),
    !halt(From),
    !no_return_call(From).

.decl must_fallthrough(From:address,To:address)

// Branch with a delay-slot must fallthrough
must_fallthrough(From,To):-
    next(From,To),
    arch.delay_slot(From,To).

must_fallthrough(From,To):-
    may_fallthrough(From,To),
    instruction_get_operation(From,Operation),
    !arch.call_operation(Operation),
    !arch.syscall_operation(Operation),
    !arch.interrupt_operation(Operation),
    !instruction_has_loop_prefix(From),
    !conditional_jump(From),
    !conditional_return(From),
    !arch.delay_slot(_,From).

//////////////////////////////////////////////////////////////
// This is a small refinement for discarding immediates as targets
// in some obvious cases. This is specially useful for PIE code where
// the address space starts from 0 (and therefore we have many more collisions).

.decl may_have_symbolic_immediate(src:address,dest:address)

may_have_symbolic_immediate(Src,as(Dest,address)):-
    instruction_immediate_offset(Src,Index,Offset,_),
    instruction_get_op(Src,Index,Op),
    op_immediate(Op,Dest),
    (
        binary_type("DYN"),
        relocation(Src+Offset,_,_,_,_,_,_)
        ;
        binary_type("REL"),
        relocation(Src+Offset,_,_,_,_,_,_)
        ;
        binary_type("EXEC"),
        instruction_get_operation(Src,Operation),
        !arch.logic_operation(Operation),
        Offset = Offset // avoid warning
    ).

.decl unlikely_have_symbolic_immediate(EA:address)
unlikely_have_symbolic_immediate(0):- false.

.decl invalid(EA:address,Type:symbol)
.output invalid

// if the decoder failed to decode any instruction at EA, EA is invalid
invalid(EA,Type):-
    invalid_op_code(EA),
    Type = "invalid_op_code".

invalid(EA,Type):-
    (
        // EA is a direct call or jump to something that cannot be code, it is invalid.
        direct_call(EA,Dest),       Type = "direct_call to invalid";
        direct_jump(EA,Dest),       Type = "direct_jump to invalid";
        // EA is followed by something that cannot be code.
        must_fallthrough(EA,Dest),  Type = "must_fallthrough to invalid"
    ),
    !instruction(Dest,_,_,_,_,_,_,_,_,_), Dest != 0.

// propagate the invalid instructions backwards until ret or jmp (encoded in must_fallthrough)
// propagate through direct jumps and calls
invalid(From,"propagate from invalid"):-
    invalid(To,_),
    (
        must_fallthrough(From,To);
        direct_jump(From,To);
        direct_call(From,To);
        pc_relative_jump(From,To);
        pc_relative_call(From,To)
    ).

invalid(EA,"known data region"):-
    data_region(Begin,Size),
    instruction(EA,_,_,_,_,_,_,_,_,_),
    Size > 0, EA >= Begin, EA < (Begin + Size).

.decl possible_ea(EA:address) inline

possible_ea(EA):-
    instruction(EA,_,_,_,_,_,_,_,_,_),
    !invalid(EA,_).

.decl basic_target(ea:address)

basic_target(Val):-
    (
        relative_address(_,_,_,_,Val,_)
        ;
        binary_type("DYN"),
        address_in_data(EA,Val),
        relocation(EA,_,_,_,_,_,_)
        ;
        binary_type("REL"),
        address_in_data(EA,Val),
        relocation(EA,_,_,_,_,_,_)
        ;
        binary_type("EXEC"),
        address_in_data(_,Val),
        !impossible_jump_target(Val)
        ;
        entry_point(Val)
        ;
        code_section(Name),
        loaded_section(Val,_,Name)
        ;
        defined_symbol(Val,_,_,_,_,_,_,_,_)
        ;
        // Exception information
        fde_addresses(Val,_)
        ;
        lsda_callsite_addresses(Val, _, _)
        ;
        lsda_callsite_addresses(_, _, Val)
    ).

.decl block_limit(EA:address)

block_limit(as(EA,address)):-
    (
        op_immediate(_,EA);
        pc_relative_operand(_,_,EA);
        basic_target(EA);
        instruction_has_loop_prefix(EA);
        fde_addresses(_,EA);
        lsda_callsite_addresses(_,EA, _)
    ).

.decl must_access_data(EA:address, Dest:address)

must_access_data(0,0):- false.

// The targets are computed incrementally now as we traverse the code
// likely_ea and possible_target_from are mutually recursive

.decl possible_target_from(dest:address,src:address)

possible_target_from(Dest,Src):-
    code_in_block_candidate(Src,_),
    (
        may_have_symbolic_immediate(Src,Dest),
        !must_access_data(Src,Dest)
        ;
        direct_jump(Src,Dest);
        direct_call(Src,Dest);
        jump_table_candidate(Src,_,Dest);
        pc_relative_jump(Src,Dest);
        pc_relative_call(Src,Dest);
        pc_relative_operand(Src,_,Dest),
        !must_access_data(Src,Dest)
    ).

.decl possible_target(Target:address)
.decl code_in_block_candidate(EA:address,EA_block:address)
.output code_in_block_candidate

possible_target(EA):-
    basic_target(EA).

possible_target(EA):-
    possible_target_from(EA,_).

/**
Aligned address shown in data
*/
.decl aligned_address_in_data(EA:address,Value:address)
aligned_address_in_data(EA,Value):-
    address_in_data(EA,Value),
    arch.pointer_size(Pt_size),
    EA % Pt_size = 0.

// start a new block given a possible target
code_in_block_candidate(EA,EA):-
    possible_target(EA),
    possible_ea(EA).

// extend the block as long as we are sure to fallthrough and we have not
// reached a block limit
code_in_block_candidate(EA,Start):-
    code_in_block_candidate(EA2,Start),
    must_fallthrough(EA2,EA),
    !block_limit(EA).


// if reached a block limit or an instruction that does not necessarily
// fallthrough continue exploring but start a new block
code_in_block_candidate(EA,EA):-
    code_in_block_candidate(EA2,_),
    may_fallthrough(EA2,EA),
    (
        !must_fallthrough(EA2,EA);
        block_limit(EA)
    ),
    possible_ea(EA).


// in case we cannot fallthrough, we skip any nops that we might find
// and generate a new possible_target once the nops finish
.decl after_end(EA:address,End:address)

after_end(Next,End):-
    code_in_block_candidate(End,_),
    next(End,Next),
    !may_fallthrough(End,Next).

after_end(Next,End):-
    after_end(EA,End),
    is_padding(EA),
    !block_limit(EA),
    next(EA,Next).

after_end(Next,End):-
    relative_address(End,Size,_,_,_,_), Next=End+Size,
    !relative_address(Next,_,_,_,_,_),
    is_padding(Next).

possible_target(EA):-
    after_end(EA,_),
    (
        !arch.is_nop(EA);
        block_limit(EA)
    ).

///////////////////////////////////////////////////////////////////////
// We are done with the recursive exploration
// Now we detect and resolve conflicts within the different blocks

//First remove common tails
.decl common_tail(EA:address)

common_tail(EA):-
    code_in_block_candidate(EA,Block),
    code_in_block_candidate(EA,Block2),
    Block != Block2,
    next(EA_prev,EA),
    code_in_block_candidate(EA_prev,Block),
    !code_in_block_candidate(EA_prev,Block2).

.decl code_in_block_candidate_refined(EA:address,Block:address)
.output code_in_block_candidate_refined

code_in_block_candidate_refined(Block,Block):-
    code_in_block_candidate(Block,Block).

code_in_block_candidate_refined(Block,Block):-
    common_tail(Block).

code_in_block_candidate_refined(EA_next,Block):-
    code_in_block_candidate_refined(EA,Block),
    next(EA,EA_next),
    // they used to be in the same block
    code_in_block_candidate(EA_next,OldBlock),
    code_in_block_candidate(EA,OldBlock),
    !code_in_block_candidate(EA_next,EA_next),
    !common_tail(EA_next).

/**
A data block candidate in a code section.
The candidate is located at address 'Block' and has 'Size' bytes.
*/
.decl data_block_candidate(Block:address,Size:unsigned)

data_block_candidate(Block,Size):-
    relative_address(Block,Size,_,_,_,_).

/**
The block candidate defined by address 'Block' extends from 'BegAddr' to 'EndAddr'.
In most cases 'BegAddr' and 'Block' coincide, but there are exceptions such as
ARM 32 Thumb code blocks. These block candidates can be code blocks or data blocks.
*/
.decl block_candidate_boundaries(Block:address,Type:block_type,BegAddr:address,EndAddr:address)
.output block_candidate_boundaries

block_candidate_boundaries(Block,"code",Block,Next):-
    !binary_isa("ARM"),
    code_in_block_candidate_refined(EA,Block),
    next(EA,Next),
    !code_in_block_candidate_refined(Next,Block).

block_candidate_boundaries(Block,"code", BegAddr,EndAddr):-
    binary_isa("ARM"),
    code_in_block_candidate_refined(EA,Block),
    next(EA,Next),
    !code_in_block_candidate_refined(Next,Block),
    BegAddr = Block - (Block band 1),
    EndAddr = Next - (Next band 1).

block_candidate_boundaries(Block,"data",Block,Block+Size):-
    data_block_candidate(Block,Size).

// auxiliary predicate to detect that there are several candidates that fallthrough into a third candidate block
.decl multiple_fallthrough_to(Block:address)

multiple_fallthrough_to(Block):-
    may_fallthrough(EA,Block),
    code_in_block_candidate_refined(EA,BlockPred),
    may_fallthrough(EA2,Block),
    code_in_block_candidate_refined(EA2,BlockPred2),
    BlockPred != BlockPred2.


.decl block_overlap(Block1:address,Type1:block_type,Block2:address,Type2:block_type)
.output block_overlap


block_overlap(Block1,Type1,Block2,Type2):-
    block_candidate_boundaries(Block1,Type1,BegAddr1,EndAddr1),
    block_candidate_boundaries(Block2,Type2,BegAddr2,_),
    (
        Block1 != Block2
    ;
        Block1 = Block2, Type1 != Type2
    ),
    BegAddr1 <= BegAddr2,
    BegAddr2 < EndAddr1.


.decl block_is_overlapping(Block:address,Type:block_type)

block_is_overlapping(Block,Type):-
    (
        block_overlap(Block,Type,_,_);
        block_overlap(_,_,Block,Type)
    ).

//////////////////////////////////////////////////////////////////////
// We need to solve the block overlaps
// we do it with heuristics
///
.decl block_total_points(Block:address,Type:block_type, points:number)

block_total_points(Block,Type,Points):-
    block_is_overlapping(Block,Type),
    Points = sum X:{block_points(Block,Type,_,X,_)}.

.decl discarded_block(Block:address,Type:block_type,Reason:symbol)
.output discarded_block

discarded_block(Block1,Type1,"less points"):-
    (
        block_overlap(Block1,Type1,Block2,Type2);
        block_overlap(Block2,Type2,Block1,Type1)
    ),
    // keep the block that has more points
    block_total_points(Block1,Type1,Points1),
    block_total_points(Block2,Type2,Points2),
    (
        Points1 < Points2
    ;
        // for equal number of points, prefer code
        Points1 = Points2,
        Type1 = "data",
        Type2 = "code"
    ).

discarded_block(Block,Type,"negative points"):-
    block_total_points(Block,Type,Points),
    Points < 0.

// propagate discarding blocks through direct jumps or calls
discarded_block(Block,"code","propagated"):-
    discarded_block(Block2,"code",_),
    !overlapping_instruction(Block2,_),
    (
        direct_jump(EA,Block2);
        direct_call(EA,Block2)
    ),
    code_in_block_candidate_refined(EA,Block).

//////////////////////////////////////////////////////////////////////
//special cases

// two blocks where the first instruction is overlapping and only different because of a prefix
// we discard the second block but register the instruction without prefix as code
overlapping_instruction(Block2,Block),
discarded_block(Block2,"code","first instruction overlap"):-
    block_overlap(Block,"code",Block2,"code"),
    // one has an extra prefix with respect to the other
    instruction(Block,Size,"LOCK",OpCode,Op1,Op2,Op3,Op4,_,_),
    Block2 = Block + 1,
    instruction(Block2,Size2,"",OpCode,Op1,Op2,Op3,Op4,_,_),
    Block2 - Block = Size - Size2.

// Auxiliary predicates to detect candidate blocks that are padding
.decl candidate_block_is_not_padding(Block:address)

candidate_block_is_not_padding(Block):-
    code_in_block_candidate_refined(EA,Block),
    !is_padding(EA).

.decl candidate_block_is_padding(Block:address)
.output candidate_block_is_padding

candidate_block_is_padding(Block):-
    code_in_block_candidate_refined(_,Block),
    !candidate_block_is_not_padding(Block).

/**
 The heuristics give a variable number of points for things like number
 of predecessors, how the block is reached (through direct jump, fallthough, etc.)
 and if the block's address appears in the data section, whether it appears aligned
 or in a pointer array. The points are trasmitted transitively though
 overlapping blocks.
*/
.decl block_points(Block:address,Type:block_type,Predecessor:address,Importance:number,HeuristicName:symbol)
.output block_points

.decl transitive_points(HeuristicName:symbol)

transitive_points("start point").
transitive_points("code section start").
transitive_points("function symbol").
transitive_points("direct jump").
transitive_points("direct call").
transitive_points("must-fallthrough").
transitive_points("may-fallthrough").
transitive_points("fits").
transitive_points("fde-entry").
transitive_points("landing-pad").
transitive_points("exc-region").
transitive_points("relative jump table target").

//////////////////////////////////////////////////////////////////////
// data block candidate points

block_points(Block,"data",0,6,"relative-jump-table"):-
    data_block_candidate(Block,Size),
    relative_address(Block,Size,_,_,_,_).


block_points(Block,"data",0,3,"relative-jump-table-start"):-
    data_block_candidate(Block,_),
    relative_address_start(Block,_,_,_,_).

//////////////////////////////////////////////////////////////////////
// code block candidate points

block_is_overlapping(Block,"code"),
block_points(Block,"code",0,-3,"overlaps with relocation"):-
    (
        binary_isa("X86");
        binary_isa("X64")
    ),
    code_in_block_candidate_refined(EA,Block),
    (
        // Block beginning intersects relocation bytes:
        relocation_size(Type,Size),
        relocation(Target,Type,_,_,_,_,_),
        EA >= Target, EA < Target + (Size/8)
        ;
        // Relocation target is in block but not aligned with operand offsets.
        instruction(EA,Size,_,_,_,_,_,_,_,_),
        relocation(Target,_,_,_,_,_,_),
        Target > EA, Target < EA + (Size/8),
        !instruction_immediate_offset(EA,_,Target-EA,_),
        !instruction_displacement_offset(EA,_,Target-EA,_)
    ).

block_points(Block,"code",0,0,"basic point"):-
    block_is_overlapping(Block,"code"),
    code_in_block_candidate_refined(_,Block).

block_points(Block,"code",0,20,"start point"):-
    block_is_overlapping(Block,"code"),
    entry_point(Block).

block_points(Block,"code",0,1,"code section start"):-
    block_is_overlapping(Block,"code"),
    code_section(Section),
    loaded_section(Block,_,Section).

block_points(Block,"code",0,20,"function symbol"):-
    block_is_overlapping(Block,"code"),
    function_symbol(Block,_).

block_points(Block,"code",0,1,"address in data"):-
    !binary_isa("X86"),
    !binary_isa("ARM"),
    block_is_overlapping(Block,"code"),
    address_in_data(Address,Block),
    !address_in_data_is_printable(Address).

block_points(Block,"code",0,1,"aligned address in data"):-
    !binary_isa("X86"),
    !binary_isa("ARM"),
    block_is_overlapping(Block,"code"),
    aligned_address_in_data(_,Block).

block_points(Block,"code",0,1,"address in data array"):-
    !binary_isa("ARM"),
    block_is_overlapping(Block,"code"),
    address_in_data(Address,Block),
    arch.pointer_size(Pt_size),
    (
      binary_format("PE");
      Address % Pt_size = 0
    ),
    (
        address_in_data(Address+Pt_size,_),
        address_in_data(Address+Pt_size*2,_)
        ;
        address_in_data(Address-Pt_size,_),
        address_in_data(Address-Pt_size*2,_)
        ;
        address_in_data(Address+Pt_size,_),
        address_in_data(Address-Pt_size,_)
    ).

block_points(Block,"code",BlockPred,6,"direct jump"):-
    block_is_overlapping(Block,"code"),
    direct_jump(EA,Block),
    code_in_block_candidate_refined(EA,BlockPred),
    BlockPred != Block,
    !block_is_overlapping(BlockPred,_).

block_points(Block,"code",BlockPred,6,"direct call"):-
    block_is_overlapping(Block,"code"),
    direct_call(EA,Block),
    code_in_block_candidate_refined(EA,BlockPred),
    BlockPred != Block,
    !block_is_overlapping(BlockPred,_).

block_points(Block,"code",BlockPred,2,"must-fallthrough"):-
    block_is_overlapping(Block,"code"),
    must_fallthrough(EA,Block),
    code_in_block_candidate_refined(EA,BlockPred),
    !candidate_block_is_padding(BlockPred),
    !block_is_overlapping(BlockPred,_).

block_points(Block,"code",BlockPred,7,"may-fallthrough"):-
    block_is_overlapping(Block,"code"),
    may_fallthrough(EA,Block),
    code_in_block_candidate_refined(EA,BlockPred),
    !candidate_block_is_padding(BlockPred),
    !block_is_overlapping(BlockPred,_).

// it fits but the previous block does not fallthrough
block_points(Block,"code",BlockPred,3,"fits"):-
    block_is_overlapping(Block,"code"),
    after_end(Block,EA),
    code_in_block_candidate_refined(EA,BlockPred),
    !block_is_overlapping(BlockPred,_).

// fits after nops block
block_points(Block,"code",BlockPred,1,"fits"):-
    block_is_overlapping(Block,"code"),
    next(EA,Block),
    code_in_block_candidate_refined(EA,BlockPred),
    candidate_block_is_padding(BlockPred),
    !block_is_overlapping(BlockPred,_).

// Prefer blocks that have a well-defined boundary with a prior block.
block_points(Block,"code",0,1,"better fit"):-
    block_is_overlapping(Block,"code"),
    block_candidate_boundaries(_,"code",_,Block).

// its address appears somewhere
block_points(Block,"code",0,3,"appears"):-
    block_is_overlapping(Block,"code"),
    possible_target_from(Block,EA),
    !unlikely_have_symbolic_immediate(EA),
    !direct_jump(EA,Block),
    !direct_call(EA,Block),
    code_in_block_candidate_refined(EA,BlockPred),
    BlockPred != Block,
    !block_is_overlapping(BlockPred,_).

block_points(Block,"code",0,3,"relative jump table target"):-
    block_is_overlapping(Block,"code"),
    relative_address(EA,_,_,_,Block,_),
    count :{ relative_address(EA,_,_,_,_,_) } = 1,
    !relative_address(Block,_,_,_,_,_).

// give a point if it may fallthrough to another block
block_points(Block,"code",Block_succ,1,"fallthrough_to"):-
    block_is_overlapping(Block,"code"),
    code_in_block_candidate_refined(EA,Block),
    may_fallthrough(EA,Block_succ),
    code_in_block_candidate_refined(_,Block_succ),
    !block_is_overlapping(Block_succ,_),
    !is_padding(Block_succ).

// transitivity for fallthrough and direct jumps and calls
block_points(Block,"code",BlockPred,Points,Why):-
    block_is_overlapping(Block,"code"),
    may_fallthrough(EA,Block),
    code_in_block_candidate_refined(EA,BlockPred),
    block_is_overlapping(BlockPred,"code"),
    (
        Why = "may-fallthrough"
        ;
        !block_overlap(BlockPred,"code",_,"data"),
        !block_overlap(_,"data",BlockPred,"code")
    ),
    block_points(BlockPred,"code",_,Points,Why),
    transitive_points(Why),
    Points != 0.

block_points(Block,"code",BlockPred,Points2,Why):-
    // Because for ARM, any bytes that cannot fall through are highly likely
    // literal pool, we skip this predicate for ARM.
    !binary_isa("ARM"),
    block_is_overlapping(Block,"code"),
    after_end(Block,EA),
    code_in_block_candidate_refined(EA,BlockPred),
    block_is_overlapping(BlockPred,"code"),
    !block_overlap(BlockPred,"code",_,"data"),
    !block_overlap(_,"data",BlockPred,"code"),
    !block_overlap(Block,"code",_,"data"),
    !block_overlap(_,"data",Block,"code"),
    block_points(BlockPred,"code",_,Points,Why),
    transitive_points(Why),
    (
        Points > 2, Points2 = Points-2
        ;
        Points < -2, Points2 = Points+2
    ).

block_points(Block,"code",BlockPred,Points,Why):-
    block_is_overlapping(Block,"code"),
    direct_jump(EA,Block),
    // do not count instructions that fallthrough and jump to the same place twice
    !may_fallthrough(EA,Block),
    code_in_block_candidate_refined(EA,BlockPred),
    block_is_overlapping(BlockPred,"code"),
    !block_overlap(BlockPred,"code",_,"data"),
    !block_overlap(_,"data",BlockPred,"code"),
    block_points(BlockPred,"code",_,Points,Why),
    transitive_points(Why),
    Points != 0.

block_points(Block,"code",BlockPred,Points,Why):-
    block_is_overlapping(Block,"code"),
    direct_call(EA,Block),
    code_in_block_candidate_refined(EA,BlockPred),
    block_is_overlapping(BlockPred,"code"),
    !block_overlap(BlockPred,"code",_,"data"),
    !block_overlap(_,"data",BlockPred,"code"),
    block_points(BlockPred,"code",_,Points,Why),
    transitive_points(Why),
    Points != 0.

block_points(Block,"code",0,1,"has well-defined jump"):-
    block_is_overlapping(Block,"code"),
    code_in_block_candidate_refined(EA,Block),
    direct_jump(EA,BlockDest),
    !block_is_overlapping(BlockDest,"code").

block_points(Block,"code",0,1,"has well-defined call"):-
    block_is_overlapping(Block,"code"),
    code_in_block_candidate_refined(EA,Block),
    direct_call(EA,BlockDest),
    !block_is_overlapping(BlockDest,"code").

block_points(Block,"code",0,1,"plt call"):-
    block_is_overlapping(Block,"code"),
    code_in_block_candidate_refined(EA,Block),
    direct_call(EA,BlockDest),
    plt_entry(BlockDest,_).

block_points(Block,"code",0,10,"fde-entry"):-
    block_is_overlapping(Block,"code"),
    fde_addresses(Block,_).

block_points(Block,"code",0,2,"padding nop block"):-
    block_is_overlapping(Block,"code"),
    fde_addresses(_,Block),
    arch.is_nop(Block).

block_points(Block,"code",0,-1,"overlap long nop"):-
    block_is_overlapping(Block,"code"),
    block_overlap(Block,"code",Block2,"code"),
    code_in_block_candidate_refined(EA_nop,Block2),
    arch.is_nop(EA_nop).

block_points(Block,"code",0,3,"exc-region"):-
    block_is_overlapping(Block,"code"),
    lsda_callsite_addresses(Block, _, _).

block_points(Block,"code",0,10,"landing-pad"):-
    block_is_overlapping(Block,"code"),
    lsda_callsite_addresses( _, _, Block).

block_points(Block,"code",0,-2,"conditional jump/return: fallthrough to invalid"):-
    code_in_block_candidate(EA,Block),
    (
        conditional_jump(EA);
        conditional_return(EA)
    ),
    next(EA,Invalid),
    invalid(Invalid,_).

data_block_candidate(Block,Size),
block_points(Block,"data",0,7,"object symbol"):-
    defined_symbol(Block,Size,"OBJECT",_,_,_,_,_,_).

block_is_overlapping(Block,"code"),
block_points(Block,"code",0,-1,"jump to string"):-
    ascii_string(Beg,End),
    direct_jump(EA,Dest),
    Dest >= Beg,
    Dest < End,
    (
        symbol(Beg,_,_,_,_,_,_,_,_)
        ;
        aligned_address_in_data(_,Beg)
    ),
    code_in_block_candidate(EA,Block).

////////////////////////////////////////////////////////////////////////////


code_in_block(EA,Block):-
    code_in_block_candidate_refined(EA,Block),
    !discarded_block(Block,"code",_).

code_in_block(EA,Block):-
    overlapping_instruction(EA,Block),
    code_in_block(Block,Block).

block_last_instruction(Block,EA):-
    code_in_block(EA,Block),
    next(EA,Next),
    !code_in_block(Next,Block).

block_boundaries(Block,BegAddr,EndAddr),
block(Block):-
    code_in_block(_,Block),
    block_candidate_boundaries(Block,"code",BegAddr,EndAddr).

code(EA):-
    code_in_block(EA,_).

block_still_overlap(Block1,Type1,Block2,Type2):-
    block_overlap(Block1,Type1,Block2,Type2),
    !discarded_block(Block1,Type1,_),
    !discarded_block(Block2,Type2,_),
    // We only care about code-code or code-data conflicts
    // but not about data-data conflicts.
    (Type1 = "code"; Type2 = "code").


.decl data_in_code_propagate(Current:address,Initial:address,SectionLimit:address)

data_in_code_propagate(BlockEndAddr,BlockEndAddr,SectionLimit):-
    block_boundaries(_,BlockBegAddr,BlockEndAddr),
    !block_boundaries(_,BlockEndAddr,_),
    loaded_section(AddrSection,SectionLimit,_),
    AddrSection <= BlockBegAddr, BlockEndAddr < SectionLimit.

data_in_code_propagate(EA+1,Begin,SectionLimit):-
    data_in_code_propagate(EA,Begin,SectionLimit),
    !block_boundaries(_,EA+1,_),
    EA+1 < SectionLimit.

data_in_code(Begin,End+1):-
    data_in_code_propagate(End,Begin,_),
    !data_in_code_propagate(End+1,Begin,_).

// Data before the first code-block in the code section.
data_in_code(Begin,Block-1):-
    loaded_section(Begin,EndSect,".text"),
    Block = min EA:{ block_boundaries(_,EA,_), EA >= Begin, EA < EndSect},
    Block > Begin.

.decl next_block_in_section(Block:address,NextBlock:address)
// Blocks are either contiguous or separated by data segments
// This assumes there are no remaining overlapping blocks.

next_block_in_section(Block,NextBlock):-
    block_boundaries(Block,_,NextBlockBeg),
    block_boundaries(NextBlock,NextBlockBeg,_).

next_block_in_section(Block,NextBlock):-
    block_boundaries(Block,_,BlockEndAddr),
    data_in_code(BlockEndAddr,NextBlockBeg),
    block_boundaries(NextBlock,NextBlockBeg,_).
