//===- data_access_analysis.dl ------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
 The data access analysis computes:

-'data_access_patterns' which represent that the address 'Address' is
 accessed with size 'Size' and multiplier 'Multiplier' from an
 instruction in 'FromWhere'.

-'preferred_data_access' the address is most likely accessed from the data access
  pattern located at ea_data_access.

data_access_patterns are computed by checking memory accesses and with
the help of the value analysis.

data_access_patterns give us very sparse information, but if an
address 'ea' is accessed with a multiplier, it is likely that
'ea'+multiplier, 'ea'+2*multiplier, etc are also accessed the same
way.  Unfortunately, we do not know until when. Therefore, we
propagate these accesses using the multiplier until we reach some
other access.
*/

// auxiliary predicate to  compute the amount of read memory
.decl instruction_memory_access_size(EA:address,Op_index:operand_index,Size:unsigned)

instruction_memory_access_size(EA,Index,SizeAccess):-
    code(EA),
    instruction_get_op(EA,Index,Op),
    (
        arch.operation_size_exception(EA,Index,SizeAccess),
        Op = Op // avoid warning
        ;
        !arch.operation_size_exception(EA,Index,_),
        op_indirect(Op,_,_,_,_,_,Size),
        SizeAccess = Size/8
    ).

//there is a data access at EA in the operand Op_index
.decl data_access(EA:address,Op_index:operand_index,RegSegment:register,RegBase:register,RegIndex:register,Mult:number,Offset:number,Size:unsigned)
.output data_access

data_access(EA,Op_index,RegSegment,RegBase,RegIndex,Mult,Offset,Size):-
    code(EA),
    instruction_get_op(EA,Op_index,Op),
    op_indirect(Op,RegSegment,RegBase,RegIndex,Mult,Offset,_),
    instruction_memory_access_size(EA,Op_index,Size).

// the register Reg has the given value at instruction EA and operand Op_index
.decl value_reg_at_operand(EA:address,Op_index:operand_index,Reg:register,EA_from:address,Mult:number,Offset:number,Type:symbol)


// value_reg_at_operand_loop is just used to give priority to "loop" values over other kinds of values
.decl value_reg_at_operand_loop(EA:address,Op_index:operand_index,Reg:register,EA_from:address,Mult:number,Offset:number,Type:symbol)


value_reg_at_operand(EA,Op_index,Reg,EA_from,Mult,BaseAddress,"loop"),
value_reg_at_operand_loop(EA,Op_index,Reg,EA_from,Mult,BaseAddress,"loop"):-
    data_access(EA,Op_index,_,Reg2,Reg3,_,_,_),
    (
        Reg = Reg2,
        Reg3 = Reg3 // avoid warning
        ;
        Reg = Reg3,
        Reg2 = Reg2 // avoid warning
    ),
    Reg != "NONE",
    def_used(EA_def,Reg,EA,Op_index),
    best_value_reg(EA_def,Reg,EA_from,Mult,Offset,"loop"),
    (
        // the access is after the increment
        !def_used(EA_from,Reg,EA,Op_index),
        BaseAddress = Offset
        ;
        // the access is before the increment
        def_used(EA_from,Reg,EA,Op_index),
        BaseAddress = Offset-Mult
    ).

value_reg_at_operand(EA,Op_index,Reg,EA_from,Mult,Offset_final,Type):-
    data_access(EA,Op_index,_,Reg2,Reg3,_,_,_),
    (
        Reg = Reg2,
        Reg3 = Reg3 // avoid warning
        ;
        Reg = Reg3,
        Reg2 = Reg2 // avoid warning
    ),
    Reg != "NONE",
    !value_reg_at_operand_loop(EA,Op_index,Reg,_,_,_,_),
    def_used(EA_def,Reg,EA,Op_index),
    best_value_reg(EA_def,Reg,EA_from,Mult,Offset,Type),
    (
        Offset_final = max(Offset,0)
        ;
        Type = "incomplete",
        Offset_final = 0,
        Offset = Offset // avoid warning
    ).

// case where there is not apparent definition
value_reg_at_operand(EA,Op_index,Reg,0,1,0,"incomplete"):-
    data_access(EA,Op_index,_,Reg2,Reg3,_,_,_),
    (
        Reg = Reg2,
        Reg3 = Reg3 // avoid warning
        ;
        Reg = Reg3,
        Reg2 = Reg2 // avoid warning
    ),
    Reg != "NONE",
    !def_used(_,Reg,EA,Op_index).

// NONE registers have 0 value
value_reg_at_operand(EA,Op_index,Reg,0,0,0,"complete"):-
    data_access(EA,Op_index,_,Reg2,Reg3,_,_,_),
    (
        Reg = Reg2,
        Reg3 = Reg3 // avoid warning
        ;
        Reg = Reg3,
        Reg2 = Reg2 // avoid warning
    ),
    Reg = "NONE".

.decl data_access_pattern(Address:address,Size:unsigned,Multiplier:number,FromWhere:address)
.output data_access_pattern

.decl data_access_pattern_candidate(Address:address,Size:unsigned,Multiplier:number,FromWhere:address)
.output data_access_pattern_candidate

.decl preferred_data_access(ea:address,ea_data_access:address)
.output preferred_data_access

//////////////////////////////////////////////////


//single access
data_access_pattern_candidate(Address,Size,0,EA):-
    data_access(EA,_,"NONE","NONE","NONE",_,Offset,Size),
    Address = as(Offset,address),
    data_segment(Beg,End),
    Address >= Beg,
    Address <= End.

// pc relative
data_access_pattern_candidate(Address,Size,0,EA):-
    code(EA),
    (
        pc_relative_operand(EA,Op_index,Address);
        split_load_operand(EA,Op_index,Address)
    ),
    instruction_memory_access_size(EA,Op_index,Size),
    data_segment(Beg,End),
    Address >= Beg,
    Address <= End.

// directly computed
data_access_pattern_candidate(Address,Size,Mult*Mult2,EA):-
    data_access(EA,Op_index,"NONE",RegBase,RegMult,Mult,Offset1,Size),
    !pc_relative_operand(EA,Op_index,_),
    !split_load_operand(EA,Op_index,_),
    RegMult != "NONE",
    RegMult != RegBase,
    value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,Offset2,_),
    value_reg_at_operand(EA,Op_index,RegBase,_,0,Offset3,"complete"),
    // the absolute value of the multiplier cannot be
    // smaller that the size (unless we have 0 multiplier)
    (
        Mult*Mult2 > 0, as(Size,number) <= Mult*Mult2;
        Mult*Mult2 = 0;
        Mult*Mult2 < 0, as(Size,number) <= -(Mult*Mult2)
    ),
    Address = as(Offset1+(Offset2*Mult)+Offset3,address),
    data_segment(Beg,End),
    Address >= Beg,
    Address <= End.

// indirectly computed
data_access_pattern_candidate(Address,Size,Mult,EA):-
    data_access(EA,Op_index,"NONE",RegBase,RegMult,Mult2,Offset1,Size),
    !pc_relative_operand(EA,Op_index,_),
    !split_load_operand(EA,Op_index,_),
    RegMult != RegBase,
    value_reg_at_operand(EA,Op_index,RegMult,_,0,Offset2,"complete"),
    value_reg_at_operand(EA,Op_index,RegBase,_,Mult,Offset3,_),
    // the absolute value of the multiplier cannot be
    // smaller that the size (unless we have 0 multiplier)
    (
        Mult > 0, as(Size,number) <= Mult;
        Mult = 0;
        Mult < 0, as(Size,number) <= -Mult
    ),
    Address = as(Offset1+Offset2*Mult2+Offset3,address),
    data_segment(Beg,End),
    Address >= Beg,
    Address <= End.

//repeated register
data_access_pattern_candidate(Address,Size,FinalMult,EA):-
    data_access(EA,Op_index,"NONE",Reg,Reg,Mult,Offset1,Size),
    Reg != "NONE",
    value_reg_at_operand(EA,Op_index,Reg,_,Mult2,Offset2,_),
    FinalMult = Mult*Mult2+Mult2,
    (as(Size,number) <= FinalMult; FinalMult = 0),
    Address = as(Offset1+(Offset2*Mult)+Offset2, address),
    data_segment(Beg,End),
    Address >= Beg,
    Address <= End.

/**
Filter out some invalid DAP candidates before performing expensive aggregation
*/
.decl data_access_pattern_candidate_refined(Address:address,Size:unsigned,Multiplier:number,FromWhere:address)

data_access_pattern_candidate_refined(Address,Size,Multiplier,From):-
    data_access_pattern_candidate(Address,Size,Multiplier,From),
    instruction_get_operation(From,Operation),
    Operation != "LEA",
    data_byte(Address,_),
    (
        // if it is an indirect call or jump, the destination should be a potential address
        address_in_data(Address,_);
        !indirect_jump(From),
        !indirect_call(From)
    ).

/**
Unique DAP Address,Size pairs at which the max must be evaluated.

Prevents evalutaing the max for each non-unique copy of the pair.
*/
.decl dap_location(Address:address,Size:unsigned)

dap_location(Address,Size):-
    data_access_pattern_candidate_refined(Address,Size,_,_).

/**
The largest multiplier for each Address,Size combination among the data access pattern candidates
*/
.decl dap_max_mult(Address:address,Size:unsigned,Max:number)

dap_max_mult(Address,Size,Max):-
    dap_location(Address,Size),
    Max = max Mult : data_access_pattern_candidate_refined(Address,Size,Mult,_).

data_access_pattern(Address,Size,Multiplier,From):-
    data_access_pattern_candidate_refined(Address,Size,Multiplier,From),
    dap_max_mult(Address,Size,Multiplier).

data_access_pattern(Address,Size,Multiplier,From):-
    data_access_pattern_candidate_refined(Address,Size,Multiplier,From),
    Multiplier = as(Size,number).

///////////////////////////////////////////////////////////////////////////////
// This code takes care of obtaining an ordering in the data_access_patterns

.decl possible_data_limit(EA:address)

possible_data_limit(EA):-
    labeled_data_candidate(EA);
    data_segment(_,EA).

.decl last_data_limit(EA:address,Where:address)

last_data_limit(EA+1,EA):-
    possible_data_limit(EA),
    data_byte(EA+1,_),
    !code(EA+1).

last_data_limit(EA+1,Where):-
    last_data_limit(EA,Where),
    data_byte(EA+1,_),
    !code(EA+1),
    !possible_data_limit(EA).

.decl last_data_access(EA:address,Where:address)

last_data_access(EA+1,EA):-
    data_access_pattern(EA,_,_,_),
    data_byte(EA+1,_).

last_data_access(EA+1,Where):-
    last_data_access(EA,Where),
    data_byte(EA+1,_),
    !data_access_pattern(EA,_,_,_).

////////////////////////////////////////////////////////////////////////////////////////////////
// This code performs the propagation of data accesses according to their multiplier
// One data access is propagated through the data section until the next one is found.
// Once the next one is found, we can still propagate if the data accesses are "synchronized"
// i.e. they have the same multiplier or they are accessed from the same address in code.


.decl propagated_data_access(EA:address,Mult:number,EA_ref:address)

propagated_data_access(EA,Mult,EA):-
    data_access_pattern(EA,_,Mult,_),
    // We only propagate data accesses with positive multipliers (for now)
    // This is just easier and gives us enough information.
    Mult >= 0.

// FIXME: This predicate has been added to avoid exceptions when mult is 0
// due to https://github.com/souffle-lang/souffle/issues/1513
.decl data_access_pattern_non_zero(Address:address,Size:unsigned,Multiplier:number,FromWhere:address)

data_access_pattern_non_zero(Address,Size,Mult,FromWhere):-
    data_access_pattern(Address,Size,Mult,FromWhere), Mult > 0.

// For all the range where the access at EA_access is the last one (using last_data_access),
// we can propagate the data access at all points, in regular intervals using Mult,
// at the same time (without a recursive rule).
// This is much more efficient than the recursive rule below.
propagated_data_access(EA_prop,Mult,EA_access):-
    last_data_access(EA_prop,EA_access),
    data_access_pattern_non_zero(EA_access,_,Mult,_), Mult > 0,
    (EA_prop - EA_access) % as(Mult,unsigned) = 0,
    // no collision with data limits
    !possible_data_limit(EA_prop),
    last_data_limit(EA_prop,LastDataLimit), LastDataLimit <= EA_access,
    // no direct collision with data accesses
    (
        !data_access_pattern(EA_prop,_,_,_);
        // unless accessed from same address
        data_access_pattern(EA_prop,S,0,From),
        data_access_pattern_non_zero(EA_access,S,Mult,From)
    ).

// If there have been data accesses in between, we still propagate
// previous data accesses as long as they have the same multiplier
// and the don't collide directly.
propagated_data_access(NextEA,Mult,EA_ref):-
    propagated_data_access(EA,Mult,EA_ref),
    NextEA = EA+ as(Mult,unsigned),
    // There is a data access in between
    last_data_access(NextEA,LastDataAccess), LastDataAccess > EA,
    //But it is "synchronized": It has the same multiplier and it does not collide
    data_access_pattern(LastDataAccess,Size,Mult,_),
    LastDataAccess+Size <= NextEA,
    // no collision with data limits
    !possible_data_limit(NextEA),
    last_data_limit(NextEA,LastDataLimit), LastDataLimit <= EA,
    // no direct collision with data accesses
    (
        !data_access_pattern(NextEA,_,_,_);
        // unless accessed from same address
        data_access_pattern(NextEA,S,0,From),
        data_access_pattern(EA_ref,S,Mult,From)
    ).

preferred_data_access(EA,EA_label):-
    propagated_data_access(EA,_,EA_label).
