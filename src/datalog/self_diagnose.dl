.decl false_negative(EA:address)
.decl false_positive(EA:address)
.output false_negative
.output false_positive
.decl relocation_in_operand(EA:address,Index:operand_index,Rel:address,InsnOffset:unsigned)


relocation_in_operand(EA,Index,Location,Offset):-
    code(EA),
    instruction_immediate_offset(EA,Index,Offset,_),
    relocation(Location,_,_,_,_,_,_),
    Location = EA+Offset.

relocation_in_operand(EA,Index,Location,Offset):-
    code(EA),
    instruction_displacement_offset(EA,Index,Offset,_),
    relocation(Location,_,_,_,_,_,_),
    Location = EA+Offset.


.decl trivial_relocation(EA:address)

trivial_relocation(EA):-
    relocation(EA,_,Symbol,0,_,_,_),
    symbol(0,_,_,_,_,0,_,_,Symbol),
    Symbol != "".

trivial_relocation(EA):-
    relocation(EA,_,"__TMC_END__",7,_,_,_).


.decl bad_symbol_constant(EA:address,cnt:number)
.output bad_symbol_constant

bad_symbol_constant(EA,Cnt):-
    relocation_in_operand(EA,Index,Rel,InsnOffset),
    relocation(Rel,_,_,Cnt,_,_,_),
    (
        pc_relative_operand(EA,Index,_),
        instruction(EA,InsnSize,_,_,_,_,_,_,_,_),
        Cnt2 = Cnt+ as(InsnSize-InsnOffset,number)
        ;
        !pc_relative_operand(EA,Index,_),
        Cnt2 = Cnt,
        InsnOffset = InsnOffset // avoid warning
    ),
    symbolic_operand(EA,Index,Dest,_),
    !moved_label(EA,Index,_,_),
    loaded_section(Base,End,Name),
    Dest >= Base,
    Dest < End,

    loaded_section(Base2,End2,Name2),
    Name2 != Name,
    Dest_minus_cnt2 = as(as(Dest,number)-Cnt2,unsigned),
    Dest_minus_cnt2 >= Base2,
    Dest_minus_cnt2 < End2,
    //not pointing to the section boundary
    Dest_minus_cnt2 != End.

bad_symbol_constant(EA,Cnt):-
    relocation_in_operand(EA,Index,Rel,InsnOffset),
    relocation(Rel,_,_,Cnt,_,_,_),
    (
        pc_relative_operand(EA,Index,_),
        instruction(EA,InsnSize,_,_,_,_,_,_,_,_),
        Cnt2 = Cnt+ as(InsnSize-InsnOffset,number)
        ;
        !pc_relative_operand(EA,Index,_),
        Cnt2 = Cnt,
        InsnOffset = InsnOffset // avoid warning
    ),
    moved_label(EA,Index,Orig,Dest),
    loaded_section(Base,End,Name),
    Dest >= Base,
    Dest < End,

    loaded_section(Base2,End2,Name2),
    Name2 != Name,
    Orig_minus_cnt2 = as(as(Orig,number)-Cnt2,unsigned),
    Orig_minus_cnt2 >= Base2,
    Orig_minus_cnt2 < End2,
    //not pointing to the section boundary
    Orig_minus_cnt2 != End.


false_negative(Location):-
    relocation_in_operand(EA,Index,Rel,_),
    !trivial_relocation(Rel),
    !symbolic_operand(EA,Index,_,_),
    !moved_label(EA,Index,_,_),
    (
        instruction_immediate_offset(EA,Index,Offset,_);
        instruction_displacement_offset(EA,Index,Offset,_)
    ),
    Location = EA+Offset.

false_positive(Location):-
    code(EA),
    (
        symbolic_operand(EA,Index,_,_);
        moved_label(EA,Index,_,_)
    ),
    !pc_relative_operand(EA,Index,_),
    !direct_jump(EA,_),
    !direct_call(EA,_),
    !relocation_in_operand(EA,Index,_,_),
    (
        instruction_immediate_offset(EA,Index,Offset,_);
        instruction_displacement_offset(EA,Index,Offset,_)
    ),
    Location=EA+Offset.

.decl zero_relocation(EA:address)

zero_relocation(EA):-
    relocation(EA,_,_,_,_,_,_),
    data_word(EA,8,0).

false_negative(EA):-
    data_byte(EA,_),
    relocation(EA,_,_,_,_,_,_),
    !zero_relocation(EA),
    !symbolic_data(EA,_,_),
    !symbol_minus_symbol(EA,_,_,_,_,_),
    regular_data_section(Sect),
    loaded_section(BegSect,EndSect,Sect),
    EA >= BegSect,
    EA < EndSect.

false_positive(EA):-
    (
        symbolic_data(EA,_,_);
        // it looks like jump tables where each entry 4 or less bytes do not have
        // relocations associated to them.
        symbol_minus_symbol(EA,Size,_,_,_,_), Size>4
    ),
    !relocation(EA,_,_,_,_,_,_),

    regular_data_section(Sect),
    loaded_section(BegSect,EndSect,Sect),
    EA >= BegSect,
    EA < EndSect.
